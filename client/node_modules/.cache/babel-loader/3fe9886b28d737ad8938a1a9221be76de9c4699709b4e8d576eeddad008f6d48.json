{"ast":null,"code":"\"use strict\";\n\nvar Readable = require('stream').Readable;\nvar QR = require('./qr-base').QR;\nvar png = require('./png');\nvar vector = require('./vector');\nvar fn_noop = function () {};\nvar BITMAP_OPTIONS = {\n  parse_url: false,\n  ec_level: 'M',\n  size: 5,\n  margin: 4,\n  customize: null\n};\nvar VECTOR_OPTIONS = {\n  parse_url: false,\n  ec_level: 'M',\n  margin: 1,\n  size: 0\n};\nfunction get_options(options, force_type) {\n  if (typeof options === 'string') {\n    options = {\n      'ec_level': options\n    };\n  } else {\n    options = options || {};\n  }\n  var _options = {\n    type: String(force_type || options.type || 'png').toLowerCase()\n  };\n  var defaults = _options.type == 'png' ? BITMAP_OPTIONS : VECTOR_OPTIONS;\n  for (var k in defaults) {\n    _options[k] = k in options ? options[k] : defaults[k];\n  }\n  return _options;\n}\nfunction qr_image(text, options) {\n  options = get_options(options);\n  var matrix = QR(text, options.ec_level, options.parse_url);\n  var stream = new Readable();\n  stream._read = fn_noop;\n  switch (options.type) {\n    case 'svg':\n    case 'pdf':\n    case 'eps':\n      process.nextTick(function () {\n        vector[options.type](matrix, stream, options.margin, options.size);\n      });\n      break;\n    case 'svgpath':\n      // deprecated, use svg_object method\n      process.nextTick(function () {\n        var obj = vector.svg_object(matrix, options.margin, options.size);\n        stream.push(obj.path);\n        stream.push(null);\n      });\n      break;\n    case 'png':\n    default:\n      process.nextTick(function () {\n        var bitmap = png.bitmap(matrix, options.size, options.margin);\n        if (options.customize) {\n          options.customize(bitmap);\n        }\n        png.png(bitmap, stream);\n      });\n  }\n  return stream;\n}\nfunction qr_image_sync(text, options) {\n  options = get_options(options);\n  var matrix = QR(text, options.ec_level, options.parse_url);\n  var stream = [];\n  var result;\n  switch (options.type) {\n    case 'svg':\n    case 'pdf':\n    case 'eps':\n      vector[options.type](matrix, stream, options.margin, options.size);\n      result = stream.filter(Boolean).join('');\n      break;\n    case 'png':\n    default:\n      var bitmap = png.bitmap(matrix, options.size, options.margin);\n      if (options.customize) {\n        options.customize(bitmap);\n      }\n      png.png(bitmap, stream);\n      result = Buffer.concat(stream.filter(Boolean));\n  }\n  return result;\n}\nfunction svg_object(text, options) {\n  options = get_options(options, 'svg');\n  var matrix = QR(text, options.ec_level);\n  return vector.svg_object(matrix, options.margin);\n}\nmodule.exports = {\n  matrix: QR,\n  image: qr_image,\n  imageSync: qr_image_sync,\n  svgObject: svg_object\n};","map":{"version":3,"names":["Readable","require","QR","png","vector","fn_noop","BITMAP_OPTIONS","parse_url","ec_level","size","margin","customize","VECTOR_OPTIONS","get_options","options","force_type","_options","type","String","toLowerCase","defaults","k","qr_image","text","matrix","stream","_read","process","nextTick","obj","svg_object","push","path","bitmap","qr_image_sync","result","filter","Boolean","join","Buffer","concat","module","exports","image","imageSync","svgObject"],"sources":["F:/Coding Projects/Chat App/client/node_modules/qr-image/lib/qr.js"],"sourcesContent":["\"use strict\";\n\nvar Readable = require('stream').Readable;\n\nvar QR = require('./qr-base').QR;\nvar png = require('./png');\nvar vector = require('./vector');\n\nvar fn_noop = function() {};\n\nvar BITMAP_OPTIONS = {\n    parse_url: false,\n    ec_level: 'M',\n    size: 5,\n    margin: 4,\n    customize: null\n};\n\nvar VECTOR_OPTIONS = {\n    parse_url: false,\n    ec_level: 'M',\n    margin: 1,\n    size: 0\n};\n\nfunction get_options(options, force_type) {\n    if (typeof options === 'string') {\n        options = { 'ec_level': options }\n    } else {\n        options = options || {};\n    }\n    var _options = {\n        type: String(force_type || options.type || 'png').toLowerCase()\n    };\n\n    var defaults = _options.type == 'png' ? BITMAP_OPTIONS : VECTOR_OPTIONS;\n\n    for (var k in defaults) {\n        _options[k] = k in options ? options[k] : defaults[k];\n    }\n\n    return _options;\n}\n\nfunction qr_image(text, options) {\n    options = get_options(options);\n\n    var matrix = QR(text, options.ec_level, options.parse_url);\n    var stream = new Readable();\n    stream._read = fn_noop;\n\n    switch (options.type) {\n    case 'svg':\n    case 'pdf':\n    case 'eps':\n        process.nextTick(function() {\n            vector[options.type](matrix, stream, options.margin, options.size);\n        });\n        break;\n    case 'svgpath':\n        // deprecated, use svg_object method\n        process.nextTick(function() {\n            var obj = vector.svg_object(matrix, options.margin, options.size);\n            stream.push(obj.path);\n            stream.push(null);\n        });\n        break;\n    case 'png':\n    default:\n        process.nextTick(function() {\n            var bitmap = png.bitmap(matrix, options.size, options.margin);\n            if (options.customize) {\n                options.customize(bitmap);\n            }\n            png.png(bitmap, stream);\n        });\n    }\n\n    return stream;\n}\n\nfunction qr_image_sync(text, options) {\n    options = get_options(options);\n\n    var matrix = QR(text, options.ec_level, options.parse_url);\n    var stream = [];\n    var result;\n\n    switch (options.type) {\n    case 'svg':\n    case 'pdf':\n    case 'eps':\n        vector[options.type](matrix, stream, options.margin, options.size);\n        result = stream.filter(Boolean).join('');\n        break;\n    case 'png':\n    default:\n        var bitmap = png.bitmap(matrix, options.size, options.margin);\n        if (options.customize) {\n            options.customize(bitmap);\n        }\n        png.png(bitmap, stream);\n        result = Buffer.concat(stream.filter(Boolean));\n    }\n\n    return result;\n}\n\nfunction svg_object(text, options) {\n    options = get_options(options, 'svg');\n\n    var matrix = QR(text, options.ec_level);\n    return vector.svg_object(matrix, options.margin);\n}\n\nmodule.exports = {\n    matrix: QR,\n    image: qr_image,\n    imageSync: qr_image_sync,\n    svgObject: svg_object\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}